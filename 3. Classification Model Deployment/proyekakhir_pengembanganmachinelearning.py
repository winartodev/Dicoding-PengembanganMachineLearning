# -*- coding: utf-8 -*-
"""ProyekAkhir-PengembanganMachineLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14h_KwpJqx6nLrwA7fHKd4O-vFz3AJY55
"""

!wget --no-check-certificate \
  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pemula_academy/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

import zipfile, os
import numpy as np 
import matplotlib.pyplot as plt

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# extract file 
zip_path = '/tmp/rockpaperscissors.zip'
zip_file = zipfile.ZipFile(zip_path, 'r')
zip_file.extractall('/tmp')
zip_file.close()

class MyCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('accuracy') > 0.95):
      keys = list(logs.keys())
      print("Start epoch {} of training; got log keys: {}".format(epoch, keys))
      self.model.stop_training = True

train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=20,
                                   horizontal_flip=True,
                                   shear_range=0.2,
                                   fill_mode='wrap',
                                   validation_split=0.4
                                   )

train_generator = train_datagen.flow_from_directory(
    '/tmp/rockpaperscissors/rps-cv-images',
    target_size=(150, 150), 
    batch_size=32,
    shuffle=True, 
    class_mode='categorical',
    subset='training', 
)

validation_generator = train_datagen.flow_from_directory(
    '/tmp/rockpaperscissors/rps-cv-images',
    target_size=(150, 150),
    batch_size=32,
    shuffle=True, 
    class_mode='categorical',
    subset='validation' 
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(), 
              metrics=['accuracy'])

callback = MyCallback()

history = model.fit(train_generator,
          steps_per_epoch=25,
          epochs=20,
          validation_data = validation_generator,
          validation_steps=5,
          verbose=2,
          callbacks=[callback])

evaluate_score = model.evaluate(validation_generator, steps=20)
print('Loss Score', evaluate_score[0])
print('Accuracy Score', evaluate_score[1])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoh')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoh')
plt.show()

#convert model 
converter = tf.lite.TFLiteConverter.from_keras_model(model)

tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)